
test_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000037a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  000003ee  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000003ee  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000b8  00000000  00000000  0000041e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000005d9  00000000  00000000  000004d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000023c  00000000  00000000  00000aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000026d  00000000  00000000  00000ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000164  00000000  00000000  00000f58  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000028b  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000798  00000000  00000000  00001347  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000088  00000000  00000000  00001adf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 8e 01 	jmp	0x31c	; 0x31c <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 31 01 	call	0x262	; 0x262 <main>
  74:	0c 94 bb 01 	jmp	0x376	; 0x376 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_setPinDirection>:
		case GPIOC:
		if (pin_number < 7)
		{
			return GET_BIT(PORTC_PIN, pin_number); // no errors
		}
		return -2; // pin_number is out of range
  7c:	81 30       	cpi	r24, 0x01	; 1
  7e:	c9 f0       	breq	.+50     	; 0xb2 <DIO_setPinDirection+0x36>
		case GPIOD:
		if (pin_number < 7)
		{
			return GET_BIT(PORTD_PIN, pin_number); // no errors
		}
		return -2; // pin_number is out of range
  80:	28 f0       	brcs	.+10     	; 0x8c <DIO_setPinDirection+0x10>

		default: return -1; // GPIO Id isn't defined
	}
  82:	82 30       	cpi	r24, 0x02	; 2
#include "DIO_private.h"
#include "DIO_config.h"

sint8_t DIO_setPinDirection(uint8_t GPIO, uint8_t pin_number, uint8_t direction)
{
	switch (GPIO)
  84:	39 f1       	breq	.+78     	; 0xd4 <DIO_setPinDirection+0x58>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	b1 f1       	breq	.+108    	; 0xf6 <DIO_setPinDirection+0x7a>
  8a:	46 c0       	rjmp	.+140    	; 0x118 <DIO_setPinDirection+0x9c>
	{
		case GPIOA:
			if (pin_number < 7 && direction <= 1) 
  8c:	67 30       	cpi	r22, 0x07	; 7
  8e:	08 f0       	brcs	.+2      	; 0x92 <DIO_setPinDirection+0x16>
  90:	45 c0       	rjmp	.+138    	; 0x11c <DIO_setPinDirection+0xa0>
  92:	42 30       	cpi	r20, 0x02	; 2
  94:	08 f0       	brcs	.+2      	; 0x98 <DIO_setPinDirection+0x1c>
  96:	44 c0       	rjmp	.+136    	; 0x120 <DIO_setPinDirection+0xa4>
			{
				PORTA_DDR |= (direction<< pin_number);
  98:	8a b3       	in	r24, 0x1a	; 26
  9a:	50 e0       	ldi	r21, 0x00	; 0
  9c:	9a 01       	movw	r18, r20
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <DIO_setPinDirection+0x28>
  a0:	22 0f       	add	r18, r18
  a2:	33 1f       	adc	r19, r19
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <DIO_setPinDirection+0x24>
  a8:	b9 01       	movw	r22, r18
  aa:	68 2b       	or	r22, r24
  ac:	6a bb       	out	0x1a, r22	; 26
				return 1; // no errors
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	08 95       	ret
			}
		return -2; // pin_number or direction are out of range

		case GPIOB:
			if (pin_number < 7 && direction <= 1) 
  b2:	67 30       	cpi	r22, 0x07	; 7
  b4:	b8 f5       	brcc	.+110    	; 0x124 <DIO_setPinDirection+0xa8>
  b6:	42 30       	cpi	r20, 0x02	; 2
  b8:	b8 f5       	brcc	.+110    	; 0x128 <DIO_setPinDirection+0xac>
			{
				PORTB_DDR |= (direction<< pin_number);
  ba:	87 b3       	in	r24, 0x17	; 23
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	9a 01       	movw	r18, r20
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_setPinDirection+0x4a>
  c2:	22 0f       	add	r18, r18
  c4:	33 1f       	adc	r19, r19
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_setPinDirection+0x46>
  ca:	b9 01       	movw	r22, r18
  cc:	68 2b       	or	r22, r24
  ce:	67 bb       	out	0x17, r22	; 23
				return 1; // no errors
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	08 95       	ret
			}
		return -2; // pin_number or direction are out of range
		
		case GPIOC:
			if (pin_number < 7 && direction <= 1) 
  d4:	67 30       	cpi	r22, 0x07	; 7
  d6:	50 f5       	brcc	.+84     	; 0x12c <DIO_setPinDirection+0xb0>
  d8:	42 30       	cpi	r20, 0x02	; 2
  da:	50 f5       	brcc	.+84     	; 0x130 <DIO_setPinDirection+0xb4>
				{
					PORTA_DDR |= (direction<< pin_number);
  dc:	8a b3       	in	r24, 0x1a	; 26
  de:	50 e0       	ldi	r21, 0x00	; 0
  e0:	9a 01       	movw	r18, r20
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_setPinDirection+0x6c>
  e4:	22 0f       	add	r18, r18
  e6:	33 1f       	adc	r19, r19
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_setPinDirection+0x68>
  ec:	b9 01       	movw	r22, r18
  ee:	68 2b       	or	r22, r24
  f0:	6a bb       	out	0x1a, r22	; 26
					return 1; // no errors
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	08 95       	ret
				}
		return -2; // pin_number or direction are out of range
		
		case GPIOD:
		if (pin_number < 7 && direction <= 1) 
  f6:	67 30       	cpi	r22, 0x07	; 7
  f8:	e8 f4       	brcc	.+58     	; 0x134 <DIO_setPinDirection+0xb8>
  fa:	42 30       	cpi	r20, 0x02	; 2
  fc:	e8 f4       	brcc	.+58     	; 0x138 <DIO_setPinDirection+0xbc>
				{
					PORTA_DDR |= (direction<< pin_number);
  fe:	8a b3       	in	r24, 0x1a	; 26
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	9a 01       	movw	r18, r20
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_setPinDirection+0x8e>
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_setPinDirection+0x8a>
 10e:	b9 01       	movw	r22, r18
 110:	68 2b       	or	r22, r24
 112:	6a bb       	out	0x1a, r22	; 26
					return 1; // no errors
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	08 95       	ret
				}
			
		return -2; // pin_number or direction are out of range

	default: return -1; // GPIO Id isn't defined
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	08 95       	ret
			if (pin_number < 7 && direction <= 1) 
			{
				PORTA_DDR |= (direction<< pin_number);
				return 1; // no errors
			}
		return -2; // pin_number or direction are out of range
 11c:	8e ef       	ldi	r24, 0xFE	; 254
 11e:	08 95       	ret
 120:	8e ef       	ldi	r24, 0xFE	; 254
 122:	08 95       	ret
			if (pin_number < 7 && direction <= 1) 
			{
				PORTB_DDR |= (direction<< pin_number);
				return 1; // no errors
			}
		return -2; // pin_number or direction are out of range
 124:	8e ef       	ldi	r24, 0xFE	; 254
 126:	08 95       	ret
 128:	8e ef       	ldi	r24, 0xFE	; 254
 12a:	08 95       	ret
			if (pin_number < 7 && direction <= 1) 
				{
					PORTA_DDR |= (direction<< pin_number);
					return 1; // no errors
				}
		return -2; // pin_number or direction are out of range
 12c:	8e ef       	ldi	r24, 0xFE	; 254
 12e:	08 95       	ret
 130:	8e ef       	ldi	r24, 0xFE	; 254
 132:	08 95       	ret
				{
					PORTA_DDR |= (direction<< pin_number);
					return 1; // no errors
				}
			
		return -2; // pin_number or direction are out of range
 134:	8e ef       	ldi	r24, 0xFE	; 254
 136:	08 95       	ret
 138:	8e ef       	ldi	r24, 0xFE	; 254

	default: return -1; // GPIO Id isn't defined
	}
}
 13a:	08 95       	ret

0000013c <DIO_setPinValue>:


sint8_t DIO_setPinValue(uint8_t GPIO, uint8_t pin_number, uint8_t value)
{
	switch (GPIO)
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	41 f1       	breq	.+80     	; 0x190 <DIO_setPinValue+0x54>
 140:	38 f0       	brcs	.+14     	; 0x150 <DIO_setPinValue+0x14>
 142:	82 30       	cpi	r24, 0x02	; 2
 144:	09 f4       	brne	.+2      	; 0x148 <DIO_setPinValue+0xc>
 146:	44 c0       	rjmp	.+136    	; 0x1d0 <DIO_setPinValue+0x94>
 148:	83 30       	cpi	r24, 0x03	; 3
 14a:	09 f4       	brne	.+2      	; 0x14e <DIO_setPinValue+0x12>
 14c:	61 c0       	rjmp	.+194    	; 0x210 <DIO_setPinValue+0xd4>
 14e:	7f c0       	rjmp	.+254    	; 0x24e <DIO_setPinValue+0x112>
	{
		case GPIOA:
		if (pin_number < 7)
 150:	67 30       	cpi	r22, 0x07	; 7
 152:	08 f0       	brcs	.+2      	; 0x156 <DIO_setPinValue+0x1a>
 154:	7e c0       	rjmp	.+252    	; 0x252 <DIO_setPinValue+0x116>
		{
			if (GET_BIT(value, 0) == LOW)
 156:	40 fd       	sbrc	r20, 0
 158:	0e c0       	rjmp	.+28     	; 0x176 <DIO_setPinValue+0x3a>
			{
				CLR_BIT(PORTA_DATA, pin_number);
 15a:	2b b3       	in	r18, 0x1b	; 27
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	ac 01       	movw	r20, r24
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_setPinValue+0x2c>
 164:	44 0f       	add	r20, r20
 166:	55 1f       	adc	r21, r21
 168:	6a 95       	dec	r22
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_setPinValue+0x28>
 16c:	ba 01       	movw	r22, r20
 16e:	60 95       	com	r22
 170:	62 23       	and	r22, r18
 172:	6b bb       	out	0x1b, r22	; 27
 174:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTA_DATA, pin_number);
 176:	2b b3       	in	r18, 0x1b	; 27
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	ac 01       	movw	r20, r24
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_setPinValue+0x48>
 180:	44 0f       	add	r20, r20
 182:	55 1f       	adc	r21, r21
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_setPinValue+0x44>
 188:	ba 01       	movw	r22, r20
 18a:	62 2b       	or	r22, r18
 18c:	6b bb       	out	0x1b, r22	; 27
 18e:	08 95       	ret
		}
		return -2; // pin_number is out of range


		case GPIOB:
		if (pin_number < 7)
 190:	67 30       	cpi	r22, 0x07	; 7
 192:	08 f0       	brcs	.+2      	; 0x196 <DIO_setPinValue+0x5a>
 194:	60 c0       	rjmp	.+192    	; 0x256 <DIO_setPinValue+0x11a>
		{
			if (GET_BIT(value, 0) == LOW)
 196:	40 fd       	sbrc	r20, 0
 198:	0e c0       	rjmp	.+28     	; 0x1b6 <DIO_setPinValue+0x7a>
			{
				CLR_BIT(PORTB_DATA, pin_number);
 19a:	28 b3       	in	r18, 0x18	; 24
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	ac 01       	movw	r20, r24
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <DIO_setPinValue+0x6c>
 1a4:	44 0f       	add	r20, r20
 1a6:	55 1f       	adc	r21, r21
 1a8:	6a 95       	dec	r22
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <DIO_setPinValue+0x68>
 1ac:	ba 01       	movw	r22, r20
 1ae:	60 95       	com	r22
 1b0:	62 23       	and	r22, r18
 1b2:	68 bb       	out	0x18, r22	; 24
 1b4:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTB_DATA, pin_number);
 1b6:	28 b3       	in	r18, 0x18	; 24
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	ac 01       	movw	r20, r24
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_setPinValue+0x88>
 1c0:	44 0f       	add	r20, r20
 1c2:	55 1f       	adc	r21, r21
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_setPinValue+0x84>
 1c8:	ba 01       	movw	r22, r20
 1ca:	62 2b       	or	r22, r18
 1cc:	68 bb       	out	0x18, r22	; 24
 1ce:	08 95       	ret
		}
		return -2; // pin_number is out of range

		
		case GPIOC:
		if (pin_number < 7)
 1d0:	67 30       	cpi	r22, 0x07	; 7
 1d2:	08 f0       	brcs	.+2      	; 0x1d6 <DIO_setPinValue+0x9a>
 1d4:	42 c0       	rjmp	.+132    	; 0x25a <DIO_setPinValue+0x11e>
		{
			if (GET_BIT(value, 0) == LOW)
 1d6:	40 fd       	sbrc	r20, 0
 1d8:	0e c0       	rjmp	.+28     	; 0x1f6 <DIO_setPinValue+0xba>
			{
				CLR_BIT(PORTC_DATA, pin_number);
 1da:	25 b3       	in	r18, 0x15	; 21
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	ac 01       	movw	r20, r24
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <DIO_setPinValue+0xac>
 1e4:	44 0f       	add	r20, r20
 1e6:	55 1f       	adc	r21, r21
 1e8:	6a 95       	dec	r22
 1ea:	e2 f7       	brpl	.-8      	; 0x1e4 <DIO_setPinValue+0xa8>
 1ec:	ba 01       	movw	r22, r20
 1ee:	60 95       	com	r22
 1f0:	62 23       	and	r22, r18
 1f2:	65 bb       	out	0x15, r22	; 21
 1f4:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTC_DATA, pin_number);
 1f6:	25 b3       	in	r18, 0x15	; 21
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	ac 01       	movw	r20, r24
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_setPinValue+0xc8>
 200:	44 0f       	add	r20, r20
 202:	55 1f       	adc	r21, r21
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_setPinValue+0xc4>
 208:	ba 01       	movw	r22, r20
 20a:	62 2b       	or	r22, r18
 20c:	65 bb       	out	0x15, r22	; 21
 20e:	08 95       	ret
		}
		return -2; // pin_number is out of range

		
		case GPIOD:
		if (pin_number < 7)
 210:	67 30       	cpi	r22, 0x07	; 7
 212:	28 f5       	brcc	.+74     	; 0x25e <DIO_setPinValue+0x122>
		{
			if (GET_BIT(value, 0) == LOW)
 214:	40 fd       	sbrc	r20, 0
 216:	0e c0       	rjmp	.+28     	; 0x234 <DIO_setPinValue+0xf8>
			{
				CLR_BIT(PORTD_DATA, pin_number);
 218:	22 b3       	in	r18, 0x12	; 18
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	ac 01       	movw	r20, r24
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_setPinValue+0xea>
 222:	44 0f       	add	r20, r20
 224:	55 1f       	adc	r21, r21
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_setPinValue+0xe6>
 22a:	ba 01       	movw	r22, r20
 22c:	60 95       	com	r22
 22e:	62 23       	and	r22, r18
 230:	62 bb       	out	0x12, r22	; 18
 232:	08 95       	ret
			}
			else
			{
				SET_BIT(PORTD_DATA, pin_number);
 234:	22 b3       	in	r18, 0x12	; 18
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	ac 01       	movw	r20, r24
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_setPinValue+0x106>
 23e:	44 0f       	add	r20, r20
 240:	55 1f       	adc	r21, r21
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_setPinValue+0x102>
 246:	ba 01       	movw	r22, r20
 248:	62 2b       	or	r22, r18
 24a:	62 bb       	out	0x12, r22	; 18
 24c:	08 95       	ret
			return 1; // no errors
		}
		return -2; // pin_number is out of range


		default: return -1; // GPIO Id isn't defined
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	08 95       	ret
			{
				SET_BIT(PORTA_DATA, pin_number);
			}
			return 1; // no errors
		}
		return -2; // pin_number is out of range
 252:	8e ef       	ldi	r24, 0xFE	; 254
 254:	08 95       	ret
			{
				SET_BIT(PORTB_DATA, pin_number);
			}
			return 1; // no errors
		}
		return -2; // pin_number is out of range
 256:	8e ef       	ldi	r24, 0xFE	; 254
 258:	08 95       	ret
			{
				SET_BIT(PORTC_DATA, pin_number);
			}
			return 1; // no errors
		}
		return -2; // pin_number is out of range
 25a:	8e ef       	ldi	r24, 0xFE	; 254
 25c:	08 95       	ret
			{
				SET_BIT(PORTD_DATA, pin_number);
			}
			return 1; // no errors
		}
		return -2; // pin_number is out of range
 25e:	8e ef       	ldi	r24, 0xFE	; 254


		default: return -1; // GPIO Id isn't defined
	}
}
 260:	08 95       	ret

00000262 <main>:


int main(void)
{
	// led definition
	DIO_setPinDirection(GPIOB, PIN0, OUTPUT);
 262:	41 e0       	ldi	r20, 0x01	; 1
 264:	60 e0       	ldi	r22, 0x00	; 0
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_setPinDirection>
	DIO_setPinValue(GPIOB, PIN0, LOW);
 26c:	40 e0       	ldi	r20, 0x00	; 0
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	0e 94 9e 00 	call	0x13c	; 0x13c <DIO_setPinValue>
	
	// timer configurations
	timer_init(); // timer mode is nomal
 276:	0e 94 67 01 	call	0x2ce	; 0x2ce <timer_init>
	timer_setInterval(256);
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	91 e0       	ldi	r25, 0x01	; 1
 27e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <timer_setInterval>
	timer_start(TIMER0); // timer clk = tclk/1024 (timer tick time = 1.04 ms)
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <timer_start>
    while(1)
    {
		// LOW region
        timer_waitFlag(OVERFLOW_FLAG);// 262.144 ms
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	0e 94 77 01 	call	0x2ee	; 0x2ee <timer_waitFlag>
		timer_setInterval(230);
 28e:	86 ee       	ldi	r24, 0xE6	; 230
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 73 01 	call	0x2e6	; 0x2e6 <timer_setInterval>
		timer_waitFlag(OVERFLOW_FLAG); // 244.4 ms
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	0e 94 77 01 	call	0x2ee	; 0x2ee <timer_waitFlag>
		DIO_setPinValue(GPIOB, PIN0, HIGH);
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 9e 00 	call	0x13c	; 0x13c <DIO_setPinValue>
		
		// HIGH region
		timer_setInterval(256); // reset
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	0e 94 73 01 	call	0x2e6	; 0x2e6 <timer_setInterval>
		timer_waitFlag(OVERFLOW_FLAG); // 262.144 ms
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	0e 94 77 01 	call	0x2ee	; 0x2ee <timer_waitFlag>
		timer_setInterval(36);
 2b4:	84 e2       	ldi	r24, 0x24	; 36
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <timer_setInterval>
		timer_waitFlag(OVERFLOW_FLAG); // 36.4 ms
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	0e 94 77 01 	call	0x2ee	; 0x2ee <timer_waitFlag>
		DIO_setPinValue(GPIOB, PIN0, LOW);
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	60 e0       	ldi	r22, 0x00	; 0
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 9e 00 	call	0x13c	; 0x13c <DIO_setPinValue>
 2cc:	dd cf       	rjmp	.-70     	; 0x288 <main+0x26>

000002ce <timer_init>:

sint8_t timer_init(void)
{
	// set mode
	#if TIMER_MODE == NORMAL
	TCCR0 |= 0x00;
 2ce:	83 b7       	in	r24, 0x33	; 51
 2d0:	83 bf       	out	0x33, r24	; 51
	#endif
	return 1;
}
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	08 95       	ret

000002d6 <timer_start>:


sint8_t timer_start(uint8_t timerID)
{
	// set clk source and start timer operation
	TCCR0 &= ~(0x07); // clear prescaler bits 
 2d6:	83 b7       	in	r24, 0x33	; 51
 2d8:	88 7f       	andi	r24, 0xF8	; 248
 2da:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= CLK_SOURCE; // set the value to register
 2dc:	83 b7       	in	r24, 0x33	; 51
 2de:	85 60       	ori	r24, 0x05	; 5
 2e0:	83 bf       	out	0x33, r24	; 51
	return 1;
}
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	08 95       	ret

000002e6 <timer_setInterval>:


sint8_t timer_setInterval(uint16_t num_of_counts)
{
	TCNT0 = 256-num_of_counts;
 2e6:	81 95       	neg	r24
 2e8:	82 bf       	out	0x32, r24	; 50
	return 1;
}
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	08 95       	ret

000002ee <timer_waitFlag>:
	return 1;
}

sint8_t timer_waitFlag(uint8_t flagID)
{
	switch (flagID)
 2ee:	88 23       	and	r24, r24
 2f0:	19 f0       	breq	.+6      	; 0x2f8 <timer_waitFlag+0xa>
 2f2:	81 30       	cpi	r24, 0x01	; 1
 2f4:	49 f0       	breq	.+18     	; 0x308 <timer_waitFlag+0x1a>
 2f6:	10 c0       	rjmp	.+32     	; 0x318 <timer_waitFlag+0x2a>
	{
		case OVERFLOW_FLAG:
			// wait until flag is set
			while(!GET_BIT(TIFR, 0));
 2f8:	08 b6       	in	r0, 0x38	; 56
 2fa:	00 fe       	sbrs	r0, 0
 2fc:	fd cf       	rjmp	.-6      	; 0x2f8 <timer_waitFlag+0xa>
			// clear flag
			SET_BIT(TIFR, 0);
 2fe:	88 b7       	in	r24, 0x38	; 56
 300:	81 60       	ori	r24, 0x01	; 1
 302:	88 bf       	out	0x38, r24	; 56
			// clear flag
			SET_BIT(TIFR, 1);
			break;
		default:	return -1; // data not valid
	}
	return 1; // No Errors
 304:	81 e0       	ldi	r24, 0x01	; 1
		case OVERFLOW_FLAG:
			// wait until flag is set
			while(!GET_BIT(TIFR, 0));
			// clear flag
			SET_BIT(TIFR, 0);
			break;
 306:	08 95       	ret
		case COMPARE_FLAG:
			// wait until flag is set
			while(!GET_BIT(TIFR, 1));
 308:	08 b6       	in	r0, 0x38	; 56
 30a:	01 fe       	sbrs	r0, 1
 30c:	fd cf       	rjmp	.-6      	; 0x308 <timer_waitFlag+0x1a>
			// clear flag
			SET_BIT(TIFR, 1);
 30e:	88 b7       	in	r24, 0x38	; 56
 310:	82 60       	ori	r24, 0x02	; 2
 312:	88 bf       	out	0x38, r24	; 56
			break;
		default:	return -1; // data not valid
	}
	return 1; // No Errors
 314:	81 e0       	ldi	r24, 0x01	; 1
		case COMPARE_FLAG:
			// wait until flag is set
			while(!GET_BIT(TIFR, 1));
			// clear flag
			SET_BIT(TIFR, 1);
			break;
 316:	08 95       	ret
		default:	return -1; // data not valid
 318:	8f ef       	ldi	r24, 0xFF	; 255
	}
	return 1; // No Errors
}
 31a:	08 95       	ret

0000031c <__vector_11>:


void __vector_11(void) 
{
 31c:	1f 92       	push	r1
 31e:	0f 92       	push	r0
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	0f 92       	push	r0
 324:	11 24       	eor	r1, r1
 326:	2f 93       	push	r18
 328:	3f 93       	push	r19
 32a:	4f 93       	push	r20
 32c:	5f 93       	push	r21
 32e:	6f 93       	push	r22
 330:	7f 93       	push	r23
 332:	8f 93       	push	r24
 334:	9f 93       	push	r25
 336:	af 93       	push	r26
 338:	bf 93       	push	r27
 33a:	ef 93       	push	r30
 33c:	ff 93       	push	r31
	if (overflow_callback != 0)
 33e:	80 91 60 00 	lds	r24, 0x0060
 342:	90 91 61 00 	lds	r25, 0x0061
 346:	89 2b       	or	r24, r25
 348:	29 f0       	breq	.+10     	; 0x354 <__vector_11+0x38>
	{
		//TCNT0 = 256-145; // set the value again
		overflow_callback();
 34a:	e0 91 60 00 	lds	r30, 0x0060
 34e:	f0 91 61 00 	lds	r31, 0x0061
 352:	09 95       	icall
	}
}
 354:	ff 91       	pop	r31
 356:	ef 91       	pop	r30
 358:	bf 91       	pop	r27
 35a:	af 91       	pop	r26
 35c:	9f 91       	pop	r25
 35e:	8f 91       	pop	r24
 360:	7f 91       	pop	r23
 362:	6f 91       	pop	r22
 364:	5f 91       	pop	r21
 366:	4f 91       	pop	r20
 368:	3f 91       	pop	r19
 36a:	2f 91       	pop	r18
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <_exit>:
 376:	f8 94       	cli

00000378 <__stop_program>:
 378:	ff cf       	rjmp	.-2      	; 0x378 <__stop_program>
